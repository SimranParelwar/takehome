public class Task {
    private Long id;
    private String title;
    private String description;
    private String status;

    // Constructors, Getters, Setters
}
@RestController
@RequestMapping("/tasks")
public class TaskController {
    private final List<Task> tasks = new ArrayList<>(); // In-memory storage

    @PostMapping
    public ResponseEntity<Task> createTask(@RequestBody Task task) {
        if (task.getTitle() == null || task.getTitle().isEmpty()) {
            return ResponseEntity.badRequest().build();
        }

        // Generate a unique ID for the task (you might use a more sophisticated approach)
        task.setId(System.currentTimeMillis());
        tasks.add(task);

        return ResponseEntity.ok(task);
    }

    @GetMapping
    public ResponseEntity<List<Task>> getAllTasks() {
        return ResponseEntity.ok(tasks);
    }

    @GetMapping("/{status}")
    public ResponseEntity<List<Task>> getTasksByStatus(@PathVariable String status) {
        List<Task> filteredTasks = tasks.stream()
                .filter(task -> task.getStatus().equalsIgnoreCase(status))
                .collect(Collectors.toList());

        return ResponseEntity.ok(filteredTasks);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Task> updateTaskStatus(@PathVariable Long id, @RequestParam String status) {
        Optional<Task> optionalTask = tasks.stream()
                .filter(task -> task.getId().equals(id))
                .findFirst();

        if (optionalTask.isPresent()) {
            Task task = optionalTask.get();
            task.setStatus(status);
            return ResponseEntity.ok(task);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteTask(@PathVariable Long id) {
        tasks.removeIf(task -> task.getId().equals(id));
        return ResponseEntity.ok().build();
    }
}
